datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String     @id @default(cuid())
  firstName       String
  lastName        String?
  email           String     @unique
  profilePhotoUrl String?
  
  tweets          Tweet[]    // Tweets authored by the user
  comments        Comment[]  // Comments made by the user
  likes           Like[]     // Tweets liked by the user
  retweets        Retweet[]  // Tweets retweeted by the user

  followers       Follows[]  @relation("follower")
  following       Follows[]  @relation("following")
  
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Tweet {
  id        String     @id @default(cuid())
  content   String
  authorId  String
  author    User       @relation(fields: [authorId], references: [id])
  imageUrl  String?

  comments  Comment[]  // Comments on this tweet
  likedBy   Like[]     // Likes on this tweet
  retweets  Retweet[]  // Retweets of this tweet

  views     Int        @default(0)
  
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Follows {
  follower   User   @relation("follower", fields: [followerId], references: [id])
  followerId String

  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model Comment {
  id          String   @id @default(cuid())
  tweet       Tweet    @relation(fields: [tweetId], references: [id])
  tweetId     String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  description String   // The comment text

  createdAt   DateTime @default(now())
}

model Like {
  id        String   @id @default(cuid())
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  createdAt DateTime @default(now())

  @@unique([userId, tweetId]) // Ensures a user can only like a tweet once
}

model Retweet {
  id        String   @id @default(cuid())
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  createdAt DateTime @default(now())

  @@unique([userId, tweetId]) // Ensures a user can only retweet a tweet once
}
